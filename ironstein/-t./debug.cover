    1: from functools import wraps
       
    2: class debug() : 
    1:         def __init__(self,*args,**kwargs) : 
    9:                 self.args = args
       
    1:         def __call__(self,func) : 
       
    9:                 @wraps(func)
                       def wrapper(*args,**kwargs) : 
   83:                         print('entering ' + func.__name__)
   83:                         return(func(*args))
                               print('exiting ' + func.__name__)
    9:                 return wrapper
       
       
    2: class logs() : 
    1:         def __init__(self,*args,**kwargs) :
                       self.args = args
                       print(self.args)
       
    1:         def __call__(self,func) : 
       
                       @wraps(func) 
                       def wrapper(*Args,**kwargs) : 
                               print('to be edited as of now')
                       return wrapper
       
       # def debug(*arg,**kwarg) : 
       #       def wrapper_function(func) : 
       #               def wrapper(*args,**kwargs) : 
       #                       print('entering ' + func.__name__)
       #                       func(*args,**kwargs)
       #                       print('exiting ' + func.__name__)
       #               return wrapper
       #       return wrapper_function
